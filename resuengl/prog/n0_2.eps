%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 200 600 624
%%Scilab Postscript File (1995 J.Ph Chancelier)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------
/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev WhiteLev le {closepath glev Setgray eofill}
	% sinon on utilise le ``gris'' courant
	{  closepath stroke} ifelse 
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath WhiteLev Setgray eofill
} def

%------------------------------------------------------
% trace de polygones rempli ou de polylignes 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev WhiteLev le 
	{ % polygone ferme et gris
	  closepath glev Setgray eofill}
	{ glev WhiteLev 2 add ge 
	   {%polygone ferme dont on efface l'interieur 
		%(peint avec un niveau de gris en blanc)
	    closepath WhiteLev 2 mul 2 add glev sub Setgray 
		  gsave eofill grestore 
	    stroke}
	   {%polygone simple eventuellement ferme
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto stroke 
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto stroke 
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	 arsize dx mul norme div /dx1 exch def 
	 arsize dy mul norme div /dy1 exch def 
	 /depx tipx cos20 dx1 mul add def 
	/depy  tipy cos20 dy1 mul add def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	glev WhiteLev le
	{newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg
	 Ar 4 get 64 div neg  arc closepath
	glev Setgray eofill}
	{newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	closepath  stroke} ifelse 
	Cmsave1 setmatrix } def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get 64 div neg Ar 4 get 64 div neg arc
	closepath glev Setgray stroke
	Cmsave1 setmatrix } def 

%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 

% Dessin en bas a gauche de taille 3000,2120
[0.5 5 div 0 0 0.5 5 div neg  0 3120 5 div] concat
0 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
0 Setcolor
/Times-Roman findfont 100 scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/WhiteLev 16 def
/Times-Bold findfont 240 scalefont setfont
10 Thickness
-1 -1 200000 200000 setclipzone
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
0 Setcolor
 (drawbox) 4 [ 17]
[750 530 4500 3180 
] dogrey 
0 Setcolor
 0 [5 3] [300.000000 31.800000 2.000000] [750 3710] drawaxis
(0.00) 482 4046 0  0.00 [482 3846 536 260] Show
(5.28) 1982 4046 0  0.00 [1982 3846 536 260] Show
(10.56) 3415 4046 0  0.00 [3415 3846 670 260] Show
(15.84) 4915 4046 0  0.00 [4915 3846 670 260] Show
 -90 [5 3] [212.000000 -30.000000 2.000000] [750 3710] drawaxis
(-2.65) 8 3775 0  0.00 [8 3575 670 260] Show
(-1.16) 8 2715 0  0.00 [8 2515 670 260] Show
(0.32) 142 1655 0  0.00 [142 1455 536 260] Show
(1.81) 142 595 0  0.00 [142 395 536 260] Show
750 530 4500 3180 setclipzone
0 Setcolor
/closeflag false def
 (drawpoly) 200 [ 17]
[750 3298 795 3093 840 2869 886 2631 931 2383 977 2133 1022 1887 1068 1648 1113 1425 1159 1219 
1204 1037 1250 880 1295 752 1340 653 1386 583 1431 543 1477 530 1522 541 1568 574 1613 625 
1659 690 1704 763 1749 842 1795 920 1840 994 1886 1061 1931 1117 1977 1159 2022 1187 2068 1198 
2113 1194 2159 1175 2204 1144 2250 1102 2295 1053 2340 1000 2386 948 2431 900 2477 862 2522 837 
2568 829 2613 841 2659 876 2704 936 2750 1022 2795 1134 2840 1270 2886 1430 2931 1611 2977 1808 
3022 2019 3068 2237 3113 2458 3159 2676 3204 2885 3250 3080 3295 3257 3340 3409 3386 3533 3431 3626 
3477 3685 3522 3710 3568 3698 3613 3652 3659 3572 3704 3462 3749 3324 3795 3164 3840 2985 3886 2794 
3931 2595 3977 2395 4022 2198 4068 2011 4113 1837 4159 1680 4204 1545 4250 1433 4295 1346 4340 1284 
4386 1247 4431 1235 4477 1243 4522 1270 4568 1313 4613 1366 4659 1426 4704 1488 4749 1548 4795 1601 
4840 1644 4886 1674 4931 1687 4977 1683 5022 1660 5068 1618 5113 1559 5159 1483 5204 1393 5250 1293 
] dogrey 
0 Setcolor
/absolu true def
0 Setcolor
-1 -1 200000 200000 setclipzone
 (drawbox) 4 [ 17]
[750 530 2250 2768 
] dogrey 
0 Setcolor
 showpage

 end saved restore 
